

二、项目技术栈
前后端分离
运行环境： Docker部署
后端：SpringBoot3 + MyBatis
前端：Vue3 + Element-Plus
数据库： MySQL Redis

版本要求：
jdk不低于17，MySQL 5.7或者8，node.js版本18以上，maven版本建议3.8及以上，navicat建议不低于16

数据库表：8张表
难度系数：⭐⭐⭐

三、项目功能描述
管理员
登录、个人信息、修改密码
系统首页：查看系统公告
数据统计：查看系统关键数据、查看统计图表
停车区域：查看和管理停车场的停车区域
车位信息：查看和管理停车场的车位信息，车位会跟某个停车区域绑定
停车信息：查看和管理车辆的入场信息和出场信息
缴费管理：根据入场和出场计算时间自动计算停车费用
车辆管理：查看和管理车辆信息（车辆会跟用户绑定）
公告信息：管理系统公告
管理员信息：查看和管理管理员信息
用户信息：查看和管理用户信息

用户
系统首页：显示当前的空闲车位数量、用户总缴费额等信息
注册、登录、个人信息、修改密码
公告信息：查看系统公告内容
停车区域：查看停车场的停车区域
车位信息：查看停车场的车位信息
停车信息：查看自己车辆的入场信息和出场信息
缴费信息：查看自己的停车费用，并且缴费
车辆管理：查看和管理自己的车辆信息
用户充值：模拟充值功能

创新点
Echarts图表数据统计
多角色权限控制、多模块的关联
停车区域、车位数据、停车数据、缴费数据的多维度联动
模拟停车场车位概览


菜单数据如下
[
  { "meta": { "name": "个人资料" } },
  { "meta": { "name": "修改密码" } },
  { "meta": { "name": "系统首页" } },
  { "meta": { "name": "管理员信息" } },
  { "meta": { "name": "系统公告" } },
  { "meta": { "name": "缴费信息" } },
  { "meta": { "name": "停车信息" } },
  { "meta": { "name": "车辆信息" } },
  { "meta": { "name": "车位信息" } },
  { "meta": { "name": "停车区域" } },
  { "meta": { "name": "用户信息" } },
  { "meta": { "name": "数据统计" } },
  { "meta": { "name": "区域地图" } },
  { "meta": { "name": "通知信息" } },
  { "meta": { "name": "通知信息" } }
]

请你根据上面的描述，画出系统架构图，要求体现分层结构。比如软硬件层，数据库访问层级等等
要求：生成矩形从上倒下层次明显，依次排列，不能重合或者堆叠